{"/home/travis/build/npmtest/node-npmtest-peerflix-server/test.js":"/* istanbul instrument in package npmtest_peerflix_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/lib.npmtest_peerflix_server.js":"/* istanbul instrument in package npmtest_peerflix_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_peerflix_server = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_peerflix_server = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-peerflix-server && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_peerflix_server */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_peerflix_server\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_peerflix_server.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_peerflix_server.rollup.js'] =\n            local.assetsDict['/assets.npmtest_peerflix_server.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_peerflix_server.__dirname + '/lib.npmtest_peerflix_server.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/bin.js":"#!/usr/bin/env node\n'use strict';\n\nvar STATIC_OPTIONS = { maxAge: 3600000 };\n\nvar express = require('express'),\n  http = require('http'),\n  path = require('path'),\n  socket = require('./socket'),\n  api = require('./')\n    .use(express.static(path.join(__dirname, '../dist'), STATIC_OPTIONS))\n    .use(express.static(path.join(__dirname, '../.tmp'), STATIC_OPTIONS))\n    .use(express.static(path.join(__dirname, '../app'), STATIC_OPTIONS));\n\nvar server = http.createServer(api);\nsocket(server);\nvar port = process.env.PORT || 9000;\n\nserver.listen(port).on('error', function (e) {\n  if (e.code !== 'EADDRINUSE' && e.code !== 'EACCES') {\n    throw e;\n  }\n  console.error('Port ' + port + ' is busy. Trying the next available port...');\n  server.listen(++port);\n}).on('listening', function () {\n  console.log('Listening on http://localhost:' + port);\n});\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/socket.js":"'use strict';\n\nvar stats = require('./stats');\n\nmodule.exports = function (server) {\n  var io = require('socket.io').listen(server),\n    _ = require('lodash'),\n    progress = require('./progressbar'),\n    store = require('./store');\n\n  io.sockets.on('connection', function (socket) {\n    socket.on('pause', function (infoHash) {\n      console.log('pausing ' + infoHash);\n      var torrent = store.get(infoHash);\n      if (torrent && torrent.swarm) {\n        torrent.swarm.pause();\n      }\n    });\n    socket.on('resume', function (infoHash) {\n      console.log('resuming ' + infoHash);\n      var torrent = store.get(infoHash);\n      if (torrent && torrent.swarm) {\n        torrent.swarm.resume();\n      }\n    });\n    socket.on('select', function (infoHash, file) {\n      console.log('selected ' + infoHash + '/' + file);\n      var torrent = store.get(infoHash);\n      if (torrent && torrent.files) {\n        file = torrent.files[file];\n        file.select();\n      }\n    });\n    socket.on('deselect', function (infoHash, file) {\n      console.log('deselected ' + infoHash + '/' + file);\n      var torrent = store.get(infoHash);\n      if (torrent && torrent.files) {\n        file = torrent.files[file];\n        file.deselect();\n      }\n    });\n  });\n\n  store.on('torrent', function (infoHash, torrent) {\n    function listen() {\n      var notifyProgress = _.throttle(function () {\n        io.sockets.emit('download', infoHash, progress(torrent.bitfield.buffer));\n      }, 1000, { trailing: false });\n\n      var notifySelection = _.throttle(function () {\n        var pieceLength = torrent.torrent.pieceLength;\n        io.sockets.emit('selection', infoHash, torrent.files.map(function (f) {\n          // jshint -W016\n          var start = f.offset / pieceLength | 0;\n          var end = (f.offset + f.length - 1) / pieceLength | 0;\n          return torrent.selection.some(function (s) {\n            return s.from <= start && s.to >= end;\n          });\n        }));\n      }, 2000, { trailing: false });\n\n      io.sockets.emit('verifying', infoHash, stats(torrent));\n\n      torrent.once('ready', function () {\n        io.sockets.emit('ready', infoHash, stats(torrent));\n      });\n\n      torrent.on('uninterested', function () {\n        io.sockets.emit('uninterested', infoHash);\n        notifySelection();\n      });\n\n      torrent.on('interested', function () {\n        io.sockets.emit('interested', infoHash);\n        notifySelection();\n      });\n\n      var interval = setInterval(function () {\n        io.sockets.emit('stats', infoHash, stats(torrent));\n        notifySelection();\n      }, 1000);\n\n      torrent.on('verify', notifyProgress);\n\n      torrent.on('finished', function () {\n        io.sockets.emit('finished', infoHash);\n        notifySelection();\n        notifyProgress();\n      });\n\n      torrent.once('destroyed', function () {\n        clearInterval(interval);\n        io.sockets.emit('destroyed', infoHash);\n      });\n    }\n\n    if (torrent.torrent) {\n      listen();\n    } else {\n      torrent.once('verifying', listen);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/stats.js":"'use strict';\r\n\r\nmodule.exports = function stats(torrent) {\r\n  var swarm = torrent.swarm;\r\n  return {\r\n    peers: {\r\n      total: swarm.wires.length,\r\n      unchocked: swarm.wires.reduce(function (prev, wire) {\r\n        return prev + !wire.peerChoking;\r\n      }, 0)\r\n    },\r\n    traffic: {\r\n      down: swarm.downloaded,\r\n      up: swarm.uploaded\r\n    },\r\n    speed: {\r\n      down: swarm.downloadSpeed(),\r\n      up: swarm.uploadSpeed()\r\n    },\r\n    queue: swarm.queued,\r\n    paused: swarm.paused\r\n  };\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/index.js":"'use strict';\n\nvar rangeParser = require('range-parser'),\n  pump = require('pump'),\n  _ = require('lodash'),\n  express = require('express'),\n  multipart = require('connect-multiparty'),\n  fs = require('fs'),\n  store = require('./store'),\n  progress = require('./progressbar'),\n  stats = require('./stats'),\n  api = express();\n\napi.use(express.json());\napi.use(express.logger('dev'));\napi.use(function (req, res, next) {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'OPTIONS, POST, GET, PUT, DELETE');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\n  next();\n});\n\nfunction serialize(torrent) {\n  if (!torrent.torrent) {\n    return { infoHash: torrent.infoHash };\n  }\n  var pieceLength = torrent.torrent.pieceLength;\n\n  return {\n    infoHash: torrent.infoHash,\n    name: torrent.torrent.name,\n    interested: torrent.amInterested,\n    ready: torrent.ready,\n    files: torrent.files.map(function (f) {\n      // jshint -W016\n      var start = f.offset / pieceLength | 0;\n      var end = (f.offset + f.length - 1) / pieceLength | 0;\n\n      return {\n        name: f.name,\n        path: f.path,\n        link: '/torrents/' + torrent.infoHash + '/files/' + encodeURIComponent(f.path),\n        length: f.length,\n        offset: f.offset,\n        selected: torrent.selection.some(function (s) {\n          return s.from <= start && s.to >= end;\n        })\n      };\n    }),\n    progress: progress(torrent.bitfield.buffer)\n  };\n}\n\nfunction findTorrent(req, res, next) {\n  var torrent = req.torrent = store.get(req.params.infoHash);\n  if (!torrent) {\n    return res.send(404);\n  }\n  next();\n}\n\napi.get('/torrents', function (req, res) {\n  res.send(store.list().map(serialize));\n});\n\napi.post('/torrents', function (req, res) {\n  store.add(req.body.link, function (err, infoHash) {\n    if (err) {\n      console.error(err);\n      res.send(500, err);\n    } else {\n      res.send({ infoHash: infoHash });\n    }\n  });\n});\n\napi.post('/upload', multipart(), function (req, res) {\n  var file = req.files && req.files.file;\n  if (!file) {\n    return res.send(500, 'file is missing');\n  }\n  store.add(file.path, function (err, infoHash) {\n    if (err) {\n      console.error(err);\n      res.send(500, err);\n    } else {\n      res.send({ infoHash: infoHash });\n    }\n    fs.unlink(file.path);\n  });\n});\n\napi.get('/torrents/:infoHash', findTorrent, function (req, res) {\n  res.send(serialize(req.torrent));\n});\n\napi.post('/torrents/:infoHash/start/:index?', findTorrent, function (req, res) {\n  var index = parseInt(req.params.index);\n  if (index >= 0 && index < req.torrent.files.length) {\n    req.torrent.files[index].select();\n  } else {\n    req.torrent.files.forEach(function (f) {\n      f.select();\n    });\n  }\n  res.send(200);\n});\n\napi.post('/torrents/:infoHash/stop/:index?', findTorrent, function (req, res) {\n  var index = parseInt(req.params.index);\n  if (index >= 0 && index < req.torrent.files.length) {\n    req.torrent.files[index].deselect();\n  } else {\n    req.torrent.files.forEach(function (f) {\n      f.deselect();\n    });\n  }\n  res.send(200);\n});\n\napi.post('/torrents/:infoHash/pause', findTorrent, function (req, res) {\n  req.torrent.swarm.pause();\n  res.send(200);\n});\n\napi.post('/torrents/:infoHash/resume', findTorrent, function (req, res) {\n  req.torrent.swarm.resume();\n  res.send(200);\n});\n\napi.delete('/torrents/:infoHash', findTorrent, function (req, res) {\n  store.remove(req.torrent.infoHash);\n  res.send(200);\n});\n\napi.get('/torrents/:infoHash/stats', findTorrent, function (req, res) {\n  res.send(stats(req.torrent));\n});\n\napi.get('/torrents/:infoHash/files', findTorrent, function (req, res) {\n  var torrent = req.torrent;\n  res.setHeader('Content-Type', 'application/x-mpegurl; charset=utf-8');\n  res.send('#EXTM3U\\n' + torrent.files.map(function (f) {\n      return '#EXTINF:-1,' + f.path + '\\n' +\n        req.protocol + '://' + req.get('host') + '/torrents/' + torrent.infoHash + '/files/' + encodeURIComponent(f.path);\n    }).join('\\n'));\n});\n\napi.all('/torrents/:infoHash/files/:path([^\"]+)', findTorrent, function (req, res) {\n  var torrent = req.torrent, file = _.find(torrent.files, { path: req.params.path });\n\n  if (!file) {\n    return res.send(404);\n  }\n\n  if (typeof req.query.ffmpeg !== 'undefined') {\n    return require('./ffmpeg')(req, res, torrent, file);\n  }\n\n  var range = req.headers.range;\n  range = range && rangeParser(file.length, range)[0];\n  res.setHeader('Accept-Ranges', 'bytes');\n  res.type(file.name);\n  req.connection.setTimeout(3600000);\n\n  if (!range) {\n    res.setHeader('Content-Length', file.length);\n    if (req.method === 'HEAD') {\n      return res.end();\n    }\n    return pump(file.createReadStream(), res);\n  }\n\n  res.statusCode = 206;\n  res.setHeader('Content-Length', range.end - range.start + 1);\n  res.setHeader('Content-Range', 'bytes ' + range.start + '-' + range.end + '/' + file.length);\n\n  if (req.method === 'HEAD') {\n    return res.end();\n  }\n  pump(file.createReadStream(range), res);\n});\n\nmodule.exports = api;\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/store.js":"'use strict';\n\nvar fs = require('fs'),\n  path = require('path'),\n  events = require('events'),\n  _ = require('lodash'),\n  mkdirp = require('mkdirp'),\n  readTorrent = require('read-torrent'),\n  engine = require('./engine'),\n  homePath = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'],\n  configPath = path.join(homePath, '.config', 'peerflix-server'),\n  configFile = path.join(configPath, 'config.json'),\n  storageFile = path.join(configPath, 'torrents.json'),\n  torrents = {},\n  options = {};\n\nfunction save() {\n  mkdirp(configPath, function (err) {\n    if (err) {\n      throw err;\n    }\n    var state = Object.keys(torrents).map(function (infoHash) {\n      return infoHash;\n    });\n    fs.writeFile(storageFile, JSON.stringify(state), function (err) {\n      if (err) {\n        throw err;\n      }\n      console.log('current state saved');\n    });\n  });\n}\n\nvar store = _.extend(new events.EventEmitter(), {\n  add: function (link, callback) {\n    readTorrent(link, function (err, torrent) {\n      if (err) {\n        return callback(err);\n      }\n      var infoHash = torrent.infoHash;\n      if (torrents[infoHash]) {\n        return callback(null, infoHash);\n      }\n\n      console.log('adding ' + infoHash);\n\n      try {\n        var e = engine(torrent, options);\n        store.emit('torrent', infoHash, e);\n        torrents[infoHash] = e;\n        save();\n        callback(null, infoHash);\n      } catch (e) {\n        callback(e);\n      }\n    });\n  },\n  get: function (infoHash) {\n    return torrents[infoHash];\n  },\n  remove: function (infoHash) {\n    var torrent = torrents[infoHash];\n    torrent.destroy();\n    torrent.remove(function () {\n      torrent.emit('destroyed');\n    });\n    delete torrents[infoHash];\n    save();\n  },\n  list: function () {\n    return Object.keys(torrents).map(function (infoHash) {\n      return torrents[infoHash];\n    });\n  },\n  load: function (infoHash) {\n    console.log('loading ' + infoHash);\n    var e = engine({ infoHash: infoHash }, options);\n    store.emit('torrent', infoHash, e);\n    torrents[infoHash] = e;\n  }\n});\n\nmkdirp(configPath, function (err) {\n  if (err) {\n    throw err;\n  }\n  fs.readFile(configFile, function (err, data) {\n    if (err) {\n      if (err.code !== 'ENOENT') {\n        throw err;\n      }\n    } else {\n      options = JSON.parse(data);\n      console.log('options: ' + JSON.stringify(options));\n    }\n\n    fs.readFile(storageFile, function (err, data) {\n      if (err) {\n        if (err.code === 'ENOENT') {\n          console.log('previous state not found');\n        } else {\n          throw err;\n        }\n      } else {\n        var torrents = JSON.parse(data);\n        console.log('resuming from previous state');\n        torrents.forEach(function (infoHash) {\n          store.load(infoHash);\n        });\n      }\n    });\n  });\n});\n\nfunction shutdown(signal) {\n  if (signal) {\n    console.log(signal);\n  }\n\n  var keys = Object.keys(torrents);\n  if (keys.length) {\n    var key = keys[0], torrent = torrents[key];\n    torrent.destroy(function () {\n      torrent.emit('destroyed');\n      delete torrents[key];\n      process.nextTick(shutdown);\n    });\n  } else {\n    process.nextTick(process.exit);\n  }\n}\n\nprocess.on('SIGTERM', function () {\n  shutdown('SIGTERM');\n});\n\nprocess.on('SIGINT', function () {\n  shutdown('SIGINT');\n});\n\nmodule.exports = store;\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/engine.js":"'use strict';\n\nvar torrentStream = require('torrent-stream');\nvar _ = require('lodash');\nvar net = require('net');\n\nvar BITTORRENT_PORT = 6881;\nvar tryPort = new Promise(function (resolve) {\n  function findPort(port) {\n    var s = net.createServer();\n    s.on('error', function() {\n      findPort(0);\n    });\n\n    s.listen(port, function() {\n      var port = s.address().port;\n      s.close(function() {\n        resolve(port);\n      });\n    });\n  }\n  findPort(BITTORRENT_PORT);\n});\n\nmodule.exports = function (torrent, opts) {\n  var engine = torrentStream(torrent, _.clone(opts, true));\n\n  engine.once('verifying', function () {\n    var totalPieces = engine.torrent.pieces.length;\n    var verifiedPieces = 0;\n\n    console.log('verifying ' + engine.infoHash);\n    engine.files.forEach(function (file, i) {\n      console.log(i + ' ' + file.name);\n    });\n\n    engine.on('verify', function () {\n      if (++verifiedPieces === totalPieces) {\n        engine.emit('finished');\n        console.log('finished ' + engine.infoHash);\n      }\n    });\n  });\n\n  engine.once('ready', function () {\n    console.log('ready ' + engine.infoHash);\n    engine.ready = true;\n\n    // select the largest file\n    var file = engine.files.reduce(function (a, b) {\n      return a.length > b.length ? a : b;\n    });\n    file.select();\n  });\n\n  engine.on('uninterested', function () {\n    console.log('uninterested ' + engine.infoHash);\n  });\n\n  engine.on('interested', function () {\n    console.log('interested ' + engine.infoHash);\n  });\n\n  engine.on('idle', function () {\n    console.log('idle ' + engine.infoHash);\n  });\n\n  engine.on('error', function (e) {\n    console.log('error ' + engine.infoHash + ': ' + e);\n  });\n\n  engine.once('destroyed', function () {\n    console.log('destroyed ' + engine.infoHash);\n    engine.removeAllListeners();\n  });\n\n  tryPort.then(function (port) {\n    engine.listen(port, function () {\n      console.log('listening ' + engine.infoHash + ' on port ' + engine.port);\n    });\n  });\n\n  return engine;\n};\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/Gruntfile.js":"// Generated on 2014-04-05 using generator-angular 0.8.0\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n\n  // Load grunt tasks automatically\n  require('load-grunt-tasks')(grunt);\n\n  // Time how long tasks take. Can help when optimizing build times\n  require('time-grunt')(grunt);\n\n  // Define the configuration for all the tasks\n  grunt.initConfig({\n\n    // Project settings\n    yeoman: {\n      // configurable paths\n      app: require('./bower.json').appPath || 'app',\n      dist: 'dist'\n    },\n\n    // Watches files for changes and runs tasks based on the changed files\n    watch: {\n      bower: {\n        files: ['bower.json'],\n        tasks: ['wiredep']\n      },\n      js: {\n        files: ['<%= yeoman.app %>/scripts/{,*/}*.js'],\n        tasks: ['newer:jshint:all'],\n        options: {\n          livereload: true\n        }\n      },\n      jsTest: {\n        files: ['test/spec/{,*/}*.js'],\n        tasks: ['newer:jshint:test', 'karma']\n      },\n      styles: {\n        files: ['<%= yeoman.app %>/styles/{,*/}*.css'],\n        tasks: ['newer:copy:styles', 'autoprefixer']\n      },\n      gruntfile: {\n        files: ['Gruntfile.js']\n      },\n      livereload: {\n        options: {\n          livereload: '<%= connect.options.livereload %>'\n        },\n        files: [\n          '<%= yeoman.app %>/{,*/}*.html',\n          '.tmp/styles/{,*/}*.css',\n          '<%= yeoman.app %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n        ]\n      }\n    },\n\n    // The actual grunt server settings\n    connect: {\n      options: {\n        port: 9000,\n        // Change this to '0.0.0.0' to access the server from outside.\n        hostname: '*',\n        livereload: 35729\n      },\n      livereload: {\n        options: {\n          open: 'http://localhost:9000',\n          base: [\n            '.tmp',\n            '<%= yeoman.app %>'\n          ],\n          middleware: function (connect, options, middlewares) {\n            middlewares.unshift(require('./server'));\n            return middlewares;\n          },\n          onCreateServer: function(server) {\n            require('./server/socket')(server);\n          }\n        }\n      },\n      test: {\n        options: {\n          port: 9001,\n          base: [\n            '.tmp',\n            'test',\n            '<%= yeoman.app %>'\n          ]\n        }\n      },\n      dist: {\n        options: {\n          base: '<%= yeoman.dist %>',\n          middleware: function (connect, options, middlewares) {\n            middlewares.unshift(require('./server'));\n            return middlewares;\n          },\n          onCreateServer: function(server) {\n            require('./server/socket')(server);\n          }\n        }\n      }\n    },\n\n    // Make sure code styles are up to par and there are no obvious mistakes\n    jshint: {\n      options: {\n        jshintrc: '.jshintrc',\n        reporterOutput: '',\n        reporter: require('jshint-stylish')\n      },\n      all: [\n        'Gruntfile.js',\n        '<%= yeoman.app %>/scripts/{,*/}*.js'\n      ],\n      server: {\n        options: {\n          jshintrc: 'server/.jshintrc'\n        },\n        src: ['server/**/*.js']\n      },\n      test: {\n        options: {\n          jshintrc: 'test/.jshintrc'\n        },\n        src: ['test/spec/{,*/}*.js']\n      }\n    },\n\n    // Empties folders to start fresh\n    clean: {\n      dist: {\n        files: [{\n          dot: true,\n          src: [\n            '.tmp',\n            '<%= yeoman.dist %>/*',\n            '!<%= yeoman.dist %>/.git*'\n          ]\n        }]\n      },\n      server: '.tmp'\n    },\n\n    // Add vendor prefixed styles\n    autoprefixer: {\n      options: {\n        browsers: ['last 1 version']\n      },\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/styles/',\n          src: '{,*/}*.css',\n          dest: '.tmp/styles/'\n        }]\n      }\n    },\n\n    // Automatically inject Bower components into the app\n    wiredep: {\n      app: {\n        src: ['<%= yeoman.app %>/index.html'],\n        ignorePath: '<%= yeoman.app %>/',\n        overrides: {\n          bootstrap: {\n            main: [\n              'dist/css/bootstrap.css',\n              'dist/js/bootstrap.js'\n            ]\n          }\n        }\n      }\n    },\n\n    // Renames files for browser caching purposes\n    rev: {\n      dist: {\n        files: {\n          src: [\n            '<%= yeoman.dist %>/scripts/{,*/}*.js',\n            '<%= yeoman.dist %>/styles/{,*/}*.css',\n            '<%= yeoman.dist %>/images/{,*/}*.{png,jpg,jpeg,gif,webp,svg}'\n          ]\n        }\n      }\n    },\n\n    // Reads HTML for usemin blocks to enable smart builds that automatically\n    // concat, minify and revision files. Creates configurations in memory so\n    // additional tasks can operate on them\n    useminPrepare: {\n      html: '<%= yeoman.app %>/index.html',\n      options: {\n        dest: '<%= yeoman.dist %>',\n        flow: {\n          html: {\n            steps: {\n              js: ['concat', 'uglifyjs'],\n              css: ['cssmin']\n            },\n            post: {}\n          }\n        }\n      }\n    },\n\n    // Performs rewrites based on rev and the useminPrepare configuration\n    usemin: {\n      html: ['<%= yeoman.dist %>/{,*/}*.html'],\n      css: ['<%= yeoman.dist %>/styles/{,*/}*.css'],\n      js: ['<%= yeoman.dist %>/scripts/*.scripts.js'],\n      options: {\n        assetsDirs: ['<%= yeoman.dist %>'],\n        patterns: {\n          js: [[/(images\\/logo.png)/, 'Replacing reference to logo.png']]\n        }\n      }\n    },\n\n    // The following *-min tasks produce minified files in the dist folder\n    cssmin: {\n      options: {\n        root: '<%= yeoman.app %>'\n      }\n    },\n\n    svgmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.app %>/images',\n          src: '{,*/}*.svg',\n          dest: '<%= yeoman.dist %>/images'\n        }]\n      }\n    },\n\n    htmlmin: {\n      dist: {\n        options: {\n          collapseWhitespace: true,\n          collapseBooleanAttributes: true,\n          removeCommentsFromCDATA: true,\n          removeOptionalTags: true\n        },\n        files: [{\n          expand: true,\n          cwd: '<%= yeoman.dist %>',\n          src: ['*.html', 'views/{,*/}*.html'],\n          dest: '<%= yeoman.dist %>'\n        }]\n      }\n    },\n\n    // ngmin tries to make the code safe for minification automatically by\n    // using the Angular long form for dependency injection. It doesn't work on\n    // things like resolve or inject so those have to be done manually.\n    ngmin: {\n      dist: {\n        files: [{\n          expand: true,\n          cwd: '.tmp/concat/scripts',\n          src: ['*.js', '!vendor.js'],\n          dest: '.tmp/concat/scripts'\n        }]\n      }\n    },\n\n    // Copies remaining files to places other tasks can use\n    copy: {\n      dist: {\n        files: [{\n          expand: true,\n          dot: true,\n          cwd: '<%= yeoman.app %>',\n          dest: '<%= yeoman.dist %>',\n          src: [\n            '*.{ico,png,txt}',\n            '.htaccess',\n            '*.html',\n            'views/{,*/}*.html',\n            'images/{,*/}*.{png,jpg,jpeg,gif,webp}',\n            'bower_components/font-awesome/fonts/*'\n          ]\n        }, {\n          expand: true,\n          cwd: '.tmp/images',\n          dest: '<%= yeoman.dist %>/images',\n          src: ['generated/*']\n        }]\n      },\n      styles: {\n        expand: true,\n        cwd: '<%= yeoman.app %>/styles',\n        dest: '.tmp/styles/',\n        src: '{,*/}*.css'\n      }\n    },\n\n    // Run some tasks in parallel to speed up the build process\n    concurrent: {\n      server: [\n        'copy:styles'\n      ],\n      test: [\n        'copy:styles'\n      ],\n      dist: [\n        'copy:styles',\n        'svgmin'\n      ]\n    },\n\n    // By default, your `index.html`'s <!-- Usemin block --> will take care of\n    // minification. These next options are pre-configured if you do not wish\n    // to use the Usemin blocks.\n    // cssmin: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/styles/main.css': [\n    //         '.tmp/styles/{,*/}*.css',\n    //         '<%= yeoman.app %>/styles/{,*/}*.css'\n    //       ]\n    //     }\n    //   }\n    // },\n    // uglify: {\n    //   dist: {\n    //     files: {\n    //       '<%= yeoman.dist %>/scripts/scripts.js': [\n    //         '<%= yeoman.dist %>/scripts/scripts.js'\n    //       ]\n    //     }\n    //   }\n    // },\n    // concat: {\n    //   dist: {}\n    // },\n\n    // Test settings\n    karma: {\n      unit: {\n        configFile: 'karma.conf.js',\n        singleRun: true\n      }\n    }\n  });\n\n\n  grunt.registerTask('serve', function (target) {\n    if (target === 'dist') {\n      return grunt.task.run(['build', 'connect:dist:keepalive']);\n    }\n\n    grunt.task.run([\n      'clean:server',\n      'wiredep',\n      'concurrent:server',\n      'autoprefixer',\n      'connect:livereload',\n      'watch'\n    ]);\n  });\n\n  grunt.registerTask('server', function (target) {\n    grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n    grunt.task.run(['serve:' + target]);\n  });\n\n  grunt.registerTask('test', [\n    'clean:server',\n    'concurrent:test',\n    'autoprefixer',\n    'connect:test',\n    'karma'\n  ]);\n\n  grunt.registerTask('build', [\n    'clean:dist',\n    'wiredep',\n    'useminPrepare',\n    'concurrent:dist',\n    'autoprefixer',\n    'concat',\n    'ngmin',\n    'copy:dist',\n    'cssmin',\n    'uglify',\n    'rev',\n    'usemin',\n    'htmlmin'\n  ]);\n\n  grunt.registerTask('default', [\n    'newer:jshint',\n    'test',\n    'build'\n  ]);\n};\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/karma.conf.js":"// Karma configuration\n// http://karma-runner.github.io/0.10/config/configuration-file.html\n\nmodule.exports = function(config) {\n  config.set({\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n    // testing framework to use (jasmine/mocha/qunit/...)\n    frameworks: ['jasmine'],\n\n    // list of files / patterns to load in the browser\n    files: [\n      'app/bower_components/lodash/dist/lodash.js',\n      'app/bower_components/angular/angular.js',\n      'app/bower_components/angular-mocks/angular-mocks.js',\n      'app/bower_components/angular-resource/angular-resource.js',\n      'app/bower_components/angular-cookies/angular-cookies.js',\n      'app/bower_components/angular-sanitize/angular-sanitize.js',\n      'app/bower_components/angular-route/angular-route.js',\n      'app/bower_components/angular-socket-io/socket.js',\n      'app/bower_components/angular-socket-io/mock/socket-io.js',\n      'app/bower_components/ng-file-upload/angular-file-upload.js',\n      'app/scripts/*.js',\n      'app/scripts/**/*.js',\n      'test/spec/**/*.js'\n    ],\n\n    // list of files / patterns to exclude\n    exclude: [],\n\n    // web server port\n    port: 9876,\n\n    // level of logging\n    // possible values: LOG_DISABLE || LOG_ERROR || LOG_WARN || LOG_INFO || LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: ['PhantomJS'],\n\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: false\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/ffmpeg.js":"'use strict';\n\nvar path = require('path'),\n  fs = require('fs'),\n  pump = require('pump');\n\nmodule.exports = function (req, res, torrent, file) {\n  var param = req.query.ffmpeg,\n    ffmpeg = require('fluent-ffmpeg');\n\n  function probe() {\n    var filePath = path.join(torrent.path, file.path);\n    fs.exists(filePath, function (exists) {\n      if (!exists) {\n        return res.send(404, 'File doesn`t exist.');\n      }\n      return ffmpeg.ffprobe(filePath, function (err, metadata) {\n        if (err) {\n          console.error(err);\n          return res.send(500, err.toString());\n        }\n        res.send(metadata);\n      });\n    });\n  }\n\n  function remux() {\n    res.type('video/webm');\n    var command = ffmpeg(file.createReadStream())\n      .videoCodec('libvpx').audioCodec('libvorbis').format('webm')\n      .audioBitrate(128)\n      .videoBitrate(1024)\n      .outputOptions([\n        //'-threads 2',\n        '-deadline realtime',\n        '-error-resilient 1'\n      ])\n      .on('start', function (cmd) {\n        console.log(cmd);\n      })\n      .on('error', function (err) {\n        console.error(err);\n      });\n    pump(command, res);\n  }\n\n  switch (param) {\n    case 'probe':\n      return probe();\n    case 'remux':\n      return remux();\n    default:\n      res.send(501, 'Not supported.');\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-peerflix-server/node_modules/peerflix-server/server/progressbar.js":"'use strict';\n\nmodule.exports = function progressbar(buffer) {\n  var progress = [],\n    counter = 0,\n    downloaded = true;\n\n  for (var i = 0; i < buffer.length; i++) {\n    var p = buffer[i];\n    if (downloaded && p > 0 || !downloaded && p === 0) {\n      counter++;\n    } else {\n      progress.push(counter);\n      counter = 1;\n      downloaded = !downloaded;\n    }\n  }\n\n  progress.push(counter);\n\n  return progress.map(function (p) {\n    return p * 100 / buffer.length;\n  });\n};\n"}